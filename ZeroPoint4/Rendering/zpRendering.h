#pragma once
#ifndef ZP_RENDERING_H
#define ZP_RENDERING_H

#include "Core\zpCore.h"
#include "Content\zpContent.h"

#if ZP_WIN_32 || ZP_WIN_64
#define ZP_DIRECTX_SUPPORT		1
#endif

#define ZP_RENDER_TARGET_MAX_COUNT		8

enum zpRenderingEngineType {
	ZP_RENDERING_ENGINE_NONE =			0,

	ZP_RENDERING_ENGINE_OPENGL =		0x1000,
	ZP_RENDERING_ENGINE_OPENGL_1,
	ZP_RENDERING_ENGINE_OPENGL_1_1,
	ZP_RENDERING_ENGINE_OPENGL_2,
	ZP_RENDERING_ENGINE_OPENGL_3,
	ZP_RENDERING_ENGINE_OPENGL_4,
	
	ZP_RENDERING_ENGINE_DX =			0x2000,
	ZP_RENDERING_ENGINE_DX9,
	ZP_RENDERING_ENGINE_DX9_1,
	ZP_RENDERING_ENGINE_DX10,
	ZP_RENDERING_ENGINE_DX10_1,
	ZP_RENDERING_ENGINE_DX11,
};

enum zpDisplayFormat {
	ZP_DISPLAY_FORMAT_UNKNOWN	=		0,

	// R Component
	ZP_DISPLAY_FORMAT_R8_UINT,
	ZP_DISPLAY_FORMAT_R8_SINT,

	ZP_DISPLAY_FORMAT_R16_UINT,
	ZP_DISPLAY_FORMAT_R16_SINT,
	ZP_DISPLAY_FORMAT_R16_FLOAT,

	ZP_DISPLAY_FORMAT_R32_UINT,
	ZP_DISPLAY_FORMAT_R32_SINT,
	ZP_DISPLAY_FORMAT_R32_FLOAT,

	// RG Components
	ZP_DISPLAY_FORMAT_RG8_UINT,
	ZP_DISPLAY_FORMAT_RG8_SINT,

	ZP_DISPLAY_FORMAT_RG16_UINT,
	ZP_DISPLAY_FORMAT_RG16_SINT,
	ZP_DISPLAY_FORMAT_RG16_FLOAT,

	ZP_DISPLAY_FORMAT_RG32_UINT,
	ZP_DISPLAY_FORMAT_RG32_SINT,
	ZP_DISPLAY_FORMAT_RG32_FLOAT,

	// RGB Components
	ZP_DISPLAY_FORMAT_RGB32_UINT,
	ZP_DISPLAY_FORMAT_RGB32_SINT,
	ZP_DISPLAY_FORMAT_RGB32_FLOAT,

	// RGBA Components
	ZP_DISPLAY_FORMAT_RGBA8_UINT,
	ZP_DISPLAY_FORMAT_RGBA8_SINT,
	ZP_DISPLAY_FORMAT_RGBA8_UNORM,
	ZP_DISPLAY_FORMAT_RGBA8_SNORM,

	ZP_DISPLAY_FORMAT_RGBA16_UINT,
	ZP_DISPLAY_FORMAT_RGBA16_SINT,
	ZP_DISPLAY_FORMAT_RGBA16_UNORM,
	ZP_DISPLAY_FORMAT_RGBA16_SNORM,
	ZP_DISPLAY_FORMAT_RGBA16_FLOAT,

	ZP_DISPLAY_FORMAT_RGBA32_UINT,
	ZP_DISPLAY_FORMAT_RGBA32_SINT,
	ZP_DISPLAY_FORMAT_RGBA32_FLOAT,

	// Depth Buffer
	ZP_DISPLAY_FORMAT_D24S8_UNORM_UINT,
	ZP_DISPLAY_FORMAT_D32_FLOAT,
};

enum zpScreenMode {
	ZP_SCREEN_MODE_FULLSCREEN,
	ZP_SCREEN_MODE_WINDOWED,
	ZP_SCREEN_MODE_FULLSCREEN_WINDOWED,
};

struct zpDisplayMode {
	zp_uint width;
	zp_uint height;
	zp_uint refreshRate;
	zpDisplayFormat displayFormat;
};

enum zpBufferType {
	ZP_BUFFER_TYPE_VERTEX,
	ZP_BUFFER_TYPE_INDEX,
	ZP_BUFFER_TYPE_CONSTANT,
	ZP_BUFFER_TYPE_SHADER_RESOURCE,
	ZP_BUFFER_TYPE_STREAM_OUT,
	ZP_BUFFER_TYPE_RENDER_TARGET,
	ZP_BUFFER_TYPE_DEPTH_STENCIL,
	ZP_BUFFER_TYPE_UNORDERED_ACCESS,
};

enum zpBufferBindType {
	ZP_BUFFER_BIND_DEFAULT,
	ZP_BUFFER_BIND_DYNAMIC,
	ZP_BUFFER_BIND_IMMUTABLE,
};

enum zpMapType {
	ZP_MAP_TYPE_READ,
	ZP_MAP_TYPE_WRITE,
	ZP_MAP_TYPE_READ_WRITE,
	ZP_MAP_TYPE_WRITE_DISCARD,
};

enum zpTopology {
	ZP_TOPOLOGY_UNKNOWN,

	ZP_TOPOLOGY_POINT_LIST,

	ZP_TOPOLOGY_LINE_LIST,
	ZP_TOPOLOGY_LINE_STRIP,

	ZP_TOPOLOGY_TRIANGLE_LIST,
	ZP_TOPOLOGY_TRIANGLE_STRIP,
};

class zpViewport;

ZP_PURE_INTERFACE zpShaderResource;
ZP_PURE_INTERFACE zpTextureResource;
class zpRenderingResourceCreator;

ZP_PURE_INTERFACE zpBuffer;
ZP_PURE_INTERFACE zpRenderTarget;
ZP_PURE_INTERFACE zpDepthStencilBuffer;
ZP_PURE_INTERFACE zpVertexLayout;

ZP_PURE_INTERFACE zpRenderingContext;
ZP_PURE_INTERFACE zpRenderingEngine;
class zpRenderingFactory;

class zpCamera;
class zpRenderingManager;

#include "zpVertex.h"
#include "zpViewport.h"

#include "zpShaderResource.h"
#include "zpTextureResource.h"
#include "zpRenderingResourceCreator.h"

#include "zpBuffer.h"
#include "zpRenderTarget.h"
#include "zpDepthStencilBuffer.h"
#include "zpVertexLayout.h"

#include "zpRenderingContext.h"
#include "zpRenderingEngine.h"
#include "zpRenderingFactory.h"

#include "zpCamera.h"
#include "zpRenderingManager.h"

#endif