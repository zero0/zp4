<?xml version="1.0" encoding="UTF-8"?>

<project name="Blackjack" basedir="../.." default="usage">
	<description>
		ZeroPoint4 Compiler
	</description>

	<property file="arc.properties" />

	<!-- <property file="" /> -->
	<property name="vc.dir" location="D:/Program Files (x86)/Microsoft Visual Studio 10.0/VC" />
	<property name="vc.sln" value="ZeroPoint4.sln" />

	<property name="platform" value="x86" />
	<property name="rendering" value="DX10" />
	<property name="mode" value="Debug" />

	<property name="base.dir" location="." />
	<property name="bin.dir" location="${ant.project.name}/Bin" />
	<property name="assets.dir" location="${bin.dir}/Assets" />
	<property name="out.dir" location="${bin.dir}/Platform_${platform}" />
	<property name="exe.dir" location="${mode}" />
	<property name="exe-tools.dir" location="${mode}_Tools" />

	<property name="shader-compiler.exe" value="${exe.dir}/ShaderCompiler.exe" />
	<property name="mesh-compiler.exe" value="${exe.dir}/MeshCompiler.exe" />
	<property name="bison-compiler.exe" value="${exe.dir}/BisonCompiler.exe" />
	<property name="object-compiler.exe" value="${exe.dir}/ObjectCompiler.exe" />

	<property name="build-number.file" value="${ant.project.name}.buildnumber" />

	<mapper id="shader.map" type="glob" from="*.shader" to="*.shaderb" />
	<mapper id="material.map" type="glob" from="*.material" to="*.materialb" />
	<mapper id="texture.map" type="glob" from="*.png" to="*.png" />
	<mapper id="json.map" type="glob" from="*.json" to="*.jsonb" />
	<mapper id="mesh.map" type="glob" from="*.obj" to="*.meshb" />
	<mapper id="object.map" type="glob" from="*.object" to="*.objectb" />
	<mapper id="script.map" type="glob" from="*.script" to="*.scriptb" />
	<mapper id="sound.map" type="glob" from="*.wav" to="*.wav" />
	
	<fileset id="shader.files" dir="${assets.dir}" includes="**/*.shader" casesensitive="true" />
	<fileset id="material.files" dir="${assets.dir}" includes="**/*.material" casesensitive="true" />
	<fileset id="texture.files" dir="${assets.dir}" includes="**/*.png" casesensitive="true" />
	<fileset id="json.files" dir="${assets.dir}" includes="**/*.json" casesensitive="true" />
	<fileset id="mesh.files" dir="${assets.dir}" includes="**/*.obj" casesensitive="true" />
	<fileset id="object.files" dir="${assets.dir}" includes="**/*.object" casesensitive="true" />
	<fileset id="script.files" dir="${assets.dir}" includes="**/*.script" casesensitive="true" />
	<fileset id="sound.files" dir="${assets.dir}" includes="**/*.wav" casesensitive="true" />
	
	<target name="usage">
		<echo message="base = ${base.dir}" />
		<echoproperties />
	</target>

	<target name="clean-tools">
		<exec executable="cmd">
			<arg value="/c" />
			<arg value="${vc.dir}/vcvarsall.bat" />
			<arg value="${platform}" />
			<arg value="&amp;&amp;" />
			<arg value="devenv" />
			<arg value="${vc.sln}" />
			<arg value="/Clean" />
			<arg value="${mode}_Tools" />
		</exec>
	</target>

	<target name="clean-game">
		<exec executable="cmd">
			<arg value="/c" />
			<arg value="${vc.dir}/vcvarsall.bat" />
			<arg value="${platform}" />
			<arg value="&amp;&amp;" />
			<arg value="devenv" />
			<arg value="${vc.sln}" />
			<arg value="/Clean" />
			<arg value="${mode}" />
		</exec>
	</target>

	<target name="clean-bin">
		<delete includeemptydirs="true">
			<fileset dir="${out.dir}" includes="**/*" />
		</delete>
	</target>

	<target name="clean-all" depends="clean-tools, clean-game, clean-bin">
	</target>

	<target name="compile-tools">
		<exec executable="cmd">
			<arg value="/c" />
			<arg value="${vc.dir}/vcvarsall.bat" />
			<arg value="${platform}" />
			<arg value="&amp;&amp;" />
			<arg value="devenv" />
			<arg value="${vc.sln}" />
			<arg value="/Build" />
			<arg value="${mode}_Tools" />
		</exec>
	</target>

	<target name="compile-game">
		<exec executable="cmd">
			<arg value="/c" />
			<arg value="${vc.dir}/vcvarsall.bat" />
			<arg value="${platform}" />
			<arg value="&amp;&amp;" />
			<arg value="devenv" />
			<arg value="${vc.sln}" />
			<arg value="/Build" />
			<arg value="${mode}" />
		</exec>
	</target>

	<target name="up-build-number">
		<buildnumber file="${build-number.file}" />
	</target>

	<target name="make-out-dir">
		<mkdir dir="${out.dir}" />
		<mkdir dir="${out.dir}/shaders" />
		<mkdir dir="${out.dir}/materials" />
		<mkdir dir="${out.dir}/textures" />
		<mkdir dir="${out.dir}/objects" />
		<mkdir dir="${out.dir}/meshes" />
		<mkdir dir="${out.dir}/scripts" />
		<mkdir dir="${out.dir}/sounds" />
	</target>

	<target name="compile-json" depends="make-out-dir">
		<apply executable="${bison-compiler.exe}" dir="${bin.dir}" dest="${out.dir}" force="true">
			<srcfile />
			<targetfile />
			<fileset refid="json.files" />
			<mapper refid="json.map" />
		</apply>
	</target>

	<target name="compile-shaders" depends="make-out-dir">
		<!--<touch mkdirs="true">
			<fileset refid="shader.files" />
			<mapper refid="shader.map" />
		</touch>-->
		<apply executable="${shader-compiler.exe}" dir="${bin.dir}" dest="${out.dir}" force="true">
			<arg value="${rendering}" />
			<arg value="-O5" />
			<srcfile />
			<targetfile />
			<fileset refid="shader.files" />
			<mapper refid="shader.map" />
		</apply>
	</target>

	<target name="compile-materials" depends="make-out-dir">
		<!--<touch mkdirs="true">
			<fileset refid="shader.files" />
			<mapper refid="shader.map" />
		</touch>-->
		<apply executable="${bison-compiler.exe}" dir="${bin.dir}" dest="${out.dir}" force="true">
			<srcfile />
			<targetfile />
			<fileset refid="material.files" />
			<mapper refid="material.map" />
		</apply>
	</target>

	<target name="compile-meshes" depends="make-out-dir">
		<!--<touch mkdirs="true">
			<fileset refid="shader.files" />
			<mapper refid="shader.map" />
		</touch>-->
		<apply executable="${mesh-compiler.exe}" dir="${bin.dir}" dest="${out.dir}" force="true">
			<srcfile />
			<targetfile />
			<fileset refid="mesh.files" />
			<mapper refid="mesh.map" />
		</apply>
	</target>
	
	<target name="compile-objects" depends="make-out-dir">
		<!--<touch mkdirs="true">
			<fileset refid="shader.files" />
			<mapper refid="shader.map" />
		</touch>-->
		<apply executable="${object-compiler.exe}" dir="${bin.dir}" dest="${out.dir}" force="true">
			<srcfile />
			<targetfile />
			<fileset refid="object.files" />
			<mapper refid="object.map" />
		</apply>
	</target>

	<target name="compile-textures" depends="make-out-dir">
		<!-- for now just copy -->
		<copy todir="${out.dir}">
			<fileset refid="texture.files" />
			<mapper refid="texture.map" />
		</copy>
	</target>
	
	<target name="compile-scripts" depends="make-out-dir">
		<!-- for now just copy -->
		<copy todir="${out.dir}">
			<fileset refid="script.files" />
			<mapper refid="script.map" />
		</copy>
	</target>

	<target name="compile-sounds" depends="make-out-dir">
		<!-- for now just copy -->
		<copy todir="${out.dir}">
			<fileset refid="sound.files" />
			<mapper refid="sound.map" />
		</copy>
	</target>
	
	<target name="compile-assets" depends="compile-json, compile-textures, compile-materials, compile-shaders, compile-meshes, compile-objects, compile-scripts, compile-sounds">
	</target>

	<target name="find-shader-dep">
		<loadfile srcfile="${assets.dir}/materials/simple.material" property="shader-str">
			<filterchain>
				<stripjavacomments />
				<tokenfilter>
					<containsregex pattern='.*(".*?\.(:?shaderb|png)").*' replace="\1" flags="is" />
					<uniqfilter />
				</tokenfilter>
			</filterchain>
		</loadfile>
		<echo>${shader-str}</echo>
	</target>

	<target name="run">
		<exec executable="${out.dir}/${ant.project.name}.exe" dir="${out.dir}" spawn="true" />
	</target>

	<target name="rund">
		<exec executable="${out.dir}/${ant.project.name}_d.exe" dir="${out.dir}" spawn="true" />
	</target>

	<target name="test">
		<taskdef name="scanref" classname="org.zero0.zeropoint.tools.arc.util.ScanRefTask" classpath="${base.dir}/Tools/ARC/bin" />
		<scanref search="shaderb|png">
			<path>
				<fileset refid="material.files" />
			</path>
			<filterchain>
				<stripjavacomments />
				<tokenfilter>
					<containsregex pattern='.*"(.*?\.(:?shaderb|png))".*' replace="\1" flags="is" />
					<uniqfilter />
				</tokenfilter>
			</filterchain>
		</scanref>
	</target>
</project>
