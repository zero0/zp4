
#ifndef ZP_MASTER_DIRECT_SHADER
#define ZP_MASTER_DIRECT_SHADER

v2f_master MasterVert( vs_input_master v )
{
    v2f_master o = (v2f_master)0;

    float4 worldP = mul( v.vertex, world );
    o.vertex = mul( worldP, viewProjection );

    o.texcoord = TexCoordOffset( v.texcoord, _MainTex );

    float3 worldN = mul( v.normal.xyz, (float3x3)world );
    worldN = normalize( worldN );

    o.normal = v.normal;

    o.worldNormal = float4( worldN, 0 );
    o.worldPosition = worldP;

    o.lighting = float4( 0, 0, 0, 1 );
    o.lighting.rgb += _AmbientLight.rgb;

    o.lightDir = light_direction;

    #ifdef ZP_MASTER_SPECULAR_IBL
        float4 worldE = WorldSpaceViewDir( v.vertex );
        float4 worldR = reflect( -worldE, o.worldNormal );

        o.worldRefl = worldR;
    #endif // ZP_MASTER_SPECULAR_IBL

    #ifdef ZP_MASTER_VERTEX_COLOR
        o.color = v.color;
    #endif // ZP_MASTER_VERTEX_COLOR

    #if defined( ZP_MASTER_SPECULAR_IBL ) || defined( ZP_MASTER_SPECULAR_DIRECT )
        float4 viewDirFromLight = cameraLookTo;
        #ifdef ZP_MASTER_APPROX_VIEW
            o.viewDir = normalize( viewDirFromLight );
        #else
            o.viewDir = viewDirFromLight;
        #endif
    #endif // defined( ZP_MASTER_SPECULAR_IBL ) || defined( ZP_MASTER_SPECULAR_DIRECT )

    #ifdef ZP_MASTER_DIFFUSE_VERTEX_IBL
        float3 diffIBL = SHLookup( o.worldNormal );
        o.vertexIBL = float4( diffIBL, 1 );
    #endif // ZP_MASTER_DIFFUSE_VERTEX_IBL

    return o;
};

float4 MasterFrag( v2f_master v ) : SV_TARGET
{
    MasterInput surfIN = (MasterInput)0;

    surfIN.texcoord = v.texcoord;

    surfIN.worldPosition = v.worldPosition;
    surfIN.worldNormal = v.worldNormal;

    #ifdef ZP_MASTER_VERTEX_COLOR
    surfIN.color = v.color;
    #endif // ZP_MASTER_VERTEX_COLOR

    #if defined( ZP_MASTER_SPECULAR_IBL ) || defined( ZP_MASTER_SPECULAR_DIRECT )
        #ifdef ZP_MASTER_APPROX_VIEW
            surfIN.viewDir = v.viewDir;
        #else
            surfIN.viewDir = float4( normalize( v.viewDir.xyz ), 0 );
        #endif // ZP_MASTER_APPROX_VIEW
    #endif // defined( ZP_MASTER_SPECULAR_IBL ) || defined( ZP_MASTER_SPECULAR_DIRECT )

    MasterOutput o = (MasterOutput)0;

    #ifdef ZP_MASTER_NORMAL_MAP
        o.normal = v.normal;
    #endif // ZP_MASTER_NORMAL_MAP

    MasterSurface( surfIN, o );

    float atten = 1;
    float4 c = float4( 0, 0, 0, 0 );
    float4 viewDir = cameraLookTo;
    float4 lightDir = light_direction;

    #if defined( ZP_MASTER_SPECULAR_IBL ) || defined( ZP_MASTER_SPECULAR_DIRECT )
        lightDir = v.lightDir;
        viewDir = surfIN.viewDir;
    #else
        //float4 lightDir = v.lightDir; //_WorldLightDir;
    #endif // ZP_MASTER_SPECULAR_IBL || ZP_MASTER_SPECULAR_DIRECT

    #if defined( ZP_MASTER_DIFFUSE_IBL ) || defined( ZP_MASTER_DIFFUSE_DIRECT ) || defined( ZP_MASTER_SPECULAR_IBL ) || defined( ZP_MASTER_SPECULAR_DIRECT )
    c = LightingModelMaster( o, lightDir, viewDir, atten );
    #else
    c = o.albedo;
    #endif

    #ifdef ZP_MASTER_DIFFUSE_VERTEX_IBL
    c *= v.vertexIBL;
    #endif // ZP_MASTER_DIFFUSE_VERTEX_IBL

    return c;
};

#endif // ZP_MASTER_DIRECT_SHADER
