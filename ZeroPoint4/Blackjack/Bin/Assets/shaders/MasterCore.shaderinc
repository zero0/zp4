
#ifndef ZP_MASTER_CORE_SHADERINC
#define ZP_MASTER_CORE_SHADERINC

inline float3 schlickFresnel( in float3 N, in float3 H, in float specInt, in float fresnel )
{
    float4 factor;
    factor.x = saturate( dot( N, H ) );
    factor.xy = saturate( ( factor.xx * float2( -1, -fresnel ) ) + float2( 1, 1.25 ) );

    factor.zw = factor.xy * factor.xy;
    factor.zw *- factor.zw;

    factor.xy *= factor.zw;
    factor.yz = float2( specInt * factor.y, specInt );

    return lerp( sqrt( factor.xyz ), factor.xyz, 1 );
};

inline float glossLOD( in float glossMap, in float shininess )
{
    glossMap = 1.0 - glossMap;
    glossMap = 1.0 - ( glossMap * glossMap );
    return 7.0 + glossMap - ( shininess * glossMap );
};

inline float4 glossSpecCubeLookup( in float3 worldRefl, in float lod )
{
    #ifdef ZP_MASTER_SPECULAR_IBL_3D
        float4 spec = texCUBELod( _SpecIBL, worldRefl, lod );
    #else
        // TODO: convert world refl to UV coordinates
        float4 spec = tex2DLod( _SpecIBL, float2( 0, 0 ), lod );
    #endif // ZP_MASTER_SPECULAR_IBL_3D

    return spec;
};

#endif
