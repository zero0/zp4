#ifndef ZERO_POINT_SHADER_INC
#define ZERO_POINT_SHADER_INC

#include <ZeroPointHLSL.shaderinc>

ZP_CBUFFER_START( Camera, 0 )
    float4x4 viewProjection;
    float4x4 invViewProjection;

    float4 cameraUp;
    float4 cameraLookTo;
    float4 cameraPosition;

    float zNear;
    float zFar;
    float fovy;
    float aspectRatio;
ZP_CBUFFER_END

ZP_CBUFFER_START( PerFrame, 1 )
    float deltaTime;
    float actualDeltaTime;
    float fixedDeltaTime;
    float timeFromStart;
ZP_CBUFFER_END

ZP_CBUFFER_START( PerDrawCall, 2 )
    float4x4 world;
ZP_CBUFFER_END

ZP_CBUFFER_START( Light0, 3 )
    float4 light_position;
    float4 light_direction;
    float4 light_color;
    float light_innerAngle;
    float light_outerAngle;
    float light_radius;
    int light_type;
ZP_CBUFFER_END

struct vs_input_base
{
    float4 position : POSITION;
    float4 normal : NORMAL;
    float2 texcoord : TEXCOORD0;
};

struct vs_input_color
{
    float4 position : POSITION;
    float4 color : COLOR;
};

struct vs_input_gui
{
    float4 position : POSITION;
    float4 color : COLOR;
    float2 texcoord : TEXCOORD0;
};

struct vs_input_img
{
    float4 position : POSITION;
    float2 texcoord : TEXCOORD0;
};

struct vs_input_full
{
    float4 position : POSITION;
    float4 normal : NORMAL;
    float4 binormal : BINORMAL;
    float4 tangent : TANGENT;
    float4 color : COLOR;
    float2 texcoord : TEXCOORD0;
    float2 texcoord1 : TEXCOORD1;
};

float2 TexCoordMul( float4x4 m, float2 uv )
{
    return mul( m, float4( uv, 0, 0 ) ).xy;
};

#define ZP_INITIALIZE( Type, v )    v = (Type)0

#endif
