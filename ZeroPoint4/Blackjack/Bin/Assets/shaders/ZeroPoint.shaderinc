#ifndef ZP_SHADER_INC
#define ZP_SHADER_INC

#define ZP_INITIALIZE( Type, v )    v = (Type)0

#include <ZeroPointHLSL.shaderinc>

ZP_CBUFFER_START( Camera, 0 )
    float4x4 viewProjection;
    float4x4 invViewProjection;

    float4 cameraUp;
    float4 cameraLookTo;
    float4 cameraPosition;

    float zNear;
    float zFar;
    float fovy;
    float aspectRatio;
ZP_CBUFFER_END

ZP_CBUFFER_START( PerFrame, 1 )
    float deltaTime;
    float actualDeltaTime;
    float fixedDeltaTime;
    float timeFromStart;
ZP_CBUFFER_END

ZP_CBUFFER_START( PerDrawCall, 2 )
    float4x4 world;
ZP_CBUFFER_END

ZP_CBUFFER_START( Light0, 3 )
    float4 light_position;
    float4 light_direction;
    float4 light_color;
    float light_innerAngle;
    float light_outerAngle;
    float light_radius;
    int light_type;
ZP_CBUFFER_END

uniform float4 _AmbientLight;

ZP_CBUFFER_START( SH, 4 )
    float4 _SHAr;
    float4 _SHAg;
    float4 _SHAb;

    float4 _SHBr;
    float4 _SHBg;
    float4 _SHBb;

    float4 _SHC;
ZP_CBUFFER_END

struct vs_input_base
{
    float4 position : POSITION;
    float4 normal : NORMAL;
    float2 texcoord : TEXCOORD0;
};

struct vs_input_color
{
    float4 position : POSITION;
    float4 color : COLOR;
};

struct vs_input_gui
{
    float4 position : POSITION;
    float4 color : COLOR;
    float2 texcoord : TEXCOORD0;
};

struct vs_input_img
{
    float4 position : POSITION;
    float2 texcoord : TEXCOORD0;
};

struct vs_input_full
{
    float4 position : POSITION;
    float4 normal : NORMAL;
    float4 binormal : BINORMAL;
    float4 tangent : TANGENT;
    float4 color : COLOR;
    float2 texcoord : TEXCOORD0;
    float2 texcoord1 : TEXCOORD1;
};

inline float2 TexCoordMul( in float4x4 m, in float2 uv )
{
    return mul( m, float4( uv, 0, 0 ) ).xy;
};

#define TexCoordOffset( uv, name )  ( (uv) * name##_ST.xy + name##_ST.zw )

inline float3 ShadeSH( in float4 normal )
{
    float3 x1, x2, x3;

    // Linear + constant polynomial terms
    x1.r = dot( _SHAr, normal );
    x1.g = dot( _SHAg, normal );
    x1.b = dot( _SHAb, normal );

    // 4 of the quadratic polynomials
    float4 vB = normal.xyzz * normal.yzzx;
    x2.r = dot( _SHBr, vB );
    x2.g = dot( _SHBg, vB );
    x2.b = dot( _SHBb, vB );

    // Final quadratic polynomial
    float vC = normal.x * normal.x - normal.y * normal.y;
    x3 = _SHC.rgb * vC;
    return x1 + x2 + x3;
}

// Computes world space view direction
inline float4 WorldSpaceViewDir( in float4 v )
{
    return cameraPosition - mul( world, v );
}

inline float3 UnpackNormal( in float4 packednormal )
{
    return ( packednormal.xyz * 2 ) - 1;
}

#endif
